{"version":3,"sources":["Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Details/DetailPresenter.js","Routes/Details/index.js","Routes/Details/DetailContainer.js","Components/Header.js","Components/Router.js","GlobalStyles.js","Components/App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","Loader","Helmet","role","aria-label","Text","props","color","Message","text","ImageContainer","Image","bgUrl","Rating","Poster","id","imageUrl","rating","year","isMovie","to","HomePresenter","nowPlaying","upcoming","popular","error","loading","length","map","movie","key","original_title","poster_path","vote_average","release_date","substr","api","axios","create","baseURL","params","api_key","language","movieApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","tv","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","target","preventDefault","searchByTerm","a","Backdrop","bgImage","Content","Cover","Data","ItemContainer","Item","Divider","Overview","p","DetailPresenter","name","backdrop_path","substring","runtime","episode_run_time","genres","g","i","overview","DetailContainer","pathname","location","includes","match","push","history","parsedId","parseInt","isNaN","request","List","ul","li","TabLink","Link","activated","withRouter","path","exact","component","Home","TV","Search","Details","from","createGlobalStyle","reset","App","Router","GlobalStyles","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ee2bf2e2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    padding: 10px 0px;\n`;\n\nconst Title = styled.span`\n    font-weight: bold;\n    font-size: 20px;    \n`;\n\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 150px);\n    grid-gap: 20px;\n`;\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ])\n}\n\nexport default Section;","import React from 'react'\nimport styled from 'styled-components'\nimport { Helmet } from 'react-helmet'\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    font-size: 20px;\n    padding: 40px;\n`;\n\nconst Loader = () => <Container>\n    <Helmet>\n        <title>⏱Loading... | Nomflix</title>\n    </Helmet>\n    <span role=\"img\" aria-label=\"Loading\">⏱ Now Loading...</span>\n</Container>\n\nexport default Loader;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`\n\nconst Text = styled.span`\n    color: ${props => props.color};\n    font-weight: 600;\n`\n\nconst Message = ( { text, color } ) => (\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>\n);\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n};\n\nexport default Message;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nconst Container = styled.div`\n    font-size: 12px;\n\n    transition: 0.3s;\n    &:hover {\n        transform: scale(1.1);\n    }\n`\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n`\n\nconst Image = styled.div`\n    background-image: url(${props => props.bgUrl ? `https://image.tmdb.org/t/p/w300/${props.bgUrl}` : ``});\n    background-size: cover;\n    height: 200px;\n    border-radius: 4px;\n    background-position: center center;\n    margin-bottom: 3px;\n`\n\nconst Rating = styled.span`\n    display: block;\n`\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n    font-weight: 600;\n`\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255,255,255,0.5);\n`\n\n\nconst Poster = ({id, imageUrl, title, rating, year, isMovie = false}) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}` }>\n        <Container>\n            <ImageContainer>\n                <Image bgUrl={imageUrl}></Image>\n                <Rating>\n                    <span role='img' aria-label='rating'>\n                         ⭐️\n                    </span>{\" \"}\n                    {rating}/10\n                </Rating>\n            </ImageContainer>\n            <Title>{title}</Title>\n        </Container>\n    </Link>\n)\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool\n}\n\nexport default Poster;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Section from 'Components/Section'\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message'\nimport Poster from 'Components/Poster'\nimport { Helmet } from 'react-helmet'\n\nconst Container = styled.div`\n    padding: 20px 20px;\n`;\n\n\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) => loading ? <Loader /> : (\n    <Container>\n        <Helmet>\n            <title>Movies | Nomflix</title>\n        </Helmet>\n        {nowPlaying && nowPlaying.length > 0 &&\n            <Section title=\"Now Playing\" children={\n                nowPlaying.map(movie =>\n                    <Poster\n                        key={movie.id} id={movie.id}\n                        title={movie.original_title}\n                        imageUrl={movie.poster_path}\n                        rating={movie.vote_average}\n                        year={movie.release_date.substr(0,4)}\n                        isMovie={true}\n                    ></Poster>\n                )}\n            />\n        }\n        {upcoming && upcoming.length > 0 &&\n            <Section title=\"Upcoming\" children={\n                upcoming.map(movie =>\n                    <Poster \n                        key={movie.id} id={movie.id}\n                        title={movie.original_title}\n                        imageUrl={movie.poster_path}\n                        rating={movie.vote_average}\n                        year={movie.release_date.substr(0,4)}\n                        isMovie={true}\n                    ></Poster>\n                )}\n            />\n        }\n        {popular && popular.length > 0 &&\n            <Section title=\"Popular\" children={\n                popular.map(movie => \n                    <Poster\n                        key={movie.id} id={movie.id}\n                        title={movie.original_title}\n                        imageUrl={movie.poster_path}\n                        rating={movie.vote_average}\n                        year={movie.release_date.substr(0,4)}\n                        isMovie={true}\n                    ></Poster>\n                )}\n            />\n        }\n        {error && <Message text={error} color=\"#e74c3c\"></Message>}\n    </Container>\n);\n\nHomePresenter.propTypes = {\n    nowPlaying: PropTypes.array, \n    upcoming: PropTypes.array, \n    popular: PropTypes.array, \n    error: PropTypes.string, \n    loading: PropTypes.bool.isRequired, \n}\n\nexport default HomePresenter;","import axios from \"axios\"\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        api_key: \"bcfdb11506e553fcd87c0367d1690665\",\n        language: \"en-US\",\n    },\n});\n\nexport const movieApi = {\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: (id) => api.get(`movie/${id}`, {\n        params: {\n            append_to_response: \"videos\",\n        }\n    }),\n    search: (term) => api.get(\"search/movie\", {\n        params: {\n            query: encodeURIComponent(term),\n        }\n    })\n};\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) => api.get(`tv/${id}`, {\n        params: {\n            append_to_response: \"videos\",\n        }\n    }),\n    search: (term) => api.get(\"search/tv\", {\n        params: {\n            query: encodeURIComponent(term),\n        }\n    })\n};","import HomeContainer from './HomeContainer'\n\nexport default HomeContainer;","import React from 'react'\nimport HomePresenter from './HomePresenter'\nimport {movieApi} from \"api\"\n\nexport default class extends React.Component {\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        loading: true,\n    }\n\n    async componentDidMount() {\n        try {\n            const { data: { results: nowPlaying } } = await movieApi.nowPlaying();\n            const { data: { results: upcoming } } = await movieApi.upcoming();\n            const { data: { results: popular } } = await movieApi.popular();\n            this.setState({ nowPlaying, upcoming, popular })\n        }\n        catch {\n            this.setState({\n                error: \"Can't find movies information\",\n            })\n        }\n        finally {\n            this.setState({\n                loading: false,\n            })\n        }\n    }\n\n    render () {\n        const { nowPlaying, upcoming, popular, error, loading} = this.state;\n        return <HomePresenter \n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading} />\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Section from 'Components/Section'\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message'\nimport Poster from 'Components/Poster'\nimport { Helmet } from 'react-helmet'\n\nconst Container = styled.div`\n    padding: 20px 20px;\n`;\n\nconst TVPresenter = ({topRated, popular, airingToday, error, loading}) => loading ? <Loader /> : (\n    <Container>\n        <Helmet>    \n            <title>TV Shows | Nomflix</title>\n        </Helmet>\n        {topRated && topRated.length > 0 && \n            <Section title=\"Now Playing\" children={\n                topRated.map(tv => \n                    <Poster\n                        key={tv.id} id={tv.id}\n                        title={tv.original_name}\n                        imageUrl={tv.poster_path}\n                        rating={tv.vote_average}\n                        year={tv.first_air_date.substr(0,4)}\n                        isMovie={false}\n                    ></Poster>\n                )}\n            />\n        }\n        {popular && popular.length > 0 && \n            <Section title=\"Now Playing\" children={\n                popular.map(tv => \n                    <Poster\n                        key={tv.id} id={tv.id}\n                        title={tv.original_name}\n                        imageUrl={tv.poster_path}\n                        rating={tv.vote_average}\n                        year={tv.first_air_date.substr(0,4)}\n                        isMovie={false}\n                    ></Poster>\n                )}\n            />\n        }\n        {airingToday && airingToday.length > 0 && \n            <Section title=\"Now Playing\" children={\n                airingToday.map(tv => \n                    <Poster\n                        key={tv.id} id={tv.id}\n                        title={tv.original_name}\n                        imageUrl={tv.poster_path}\n                        rating={tv.vote_average}\n                        year={tv.first_air_date.substr(0,4)}\n                        isMovie={false}\n                    ></Poster>\n                )}\n            />\n        }\n        {error && <Message text={error} color=\"#e74c3c\"></Message>}\n    </Container>\n);\n\nTVPresenter.propTypes = {\n    topRated: PropTypes.array, \n    popular: PropTypes.array, \n    airingToday: PropTypes.array, \n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired, \n}\n\nexport default TVPresenter;","import TVContainer from './TVContainer'\n\nexport default TVContainer;","import React from 'react'\nimport TVPresenter from './TVPresenter'\nimport {tvApi} from \"api\"\n\nexport default class extends React.Component {\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        error: null,\n        loading: true,\n    }\n\n    async componentDidMount () {\n        try {\n            const { data : { results: topRated } } = await tvApi.topRated();\n            const { data : { results: popular } } = await tvApi.popular();\n            const { data : { results: airingToday } } = await tvApi.airingToday();\n            this.setState({ topRated, popular, airingToday })\n        } catch {\n            this.setState({\n                error: \"Can't find tvs information\",\n            })\n        } finally {\n            this.setState({\n                loading: false,\n            })\n        }\n    }\n\n    render () {\n        const { topRated, popular, airingToday, error, loading} = this.state;\n        return <TVPresenter\n                topRated={topRated}\n                popular={popular}\n                airingToday={airingToday}\n                error={error}\n                loading={loading} />\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Loader from 'Components/Loader'\nimport Section from 'Components/Section'\nimport Message from 'Components/Message'\nimport Poster from 'Components/Poster'\nimport { Helmet } from 'react-helmet'\n\nconst Container = styled.div`\n    padding: 20px 20px;\n`\n\nconst Form = styled.form`\n    margin-bottom: 50px;\n`\n\nconst Input = styled.input`\n    all: unset;\n    font-size: 28px;\n    width: 100%;\n`\n\nconst SearchPresenter = ( {movieResults, tvResults, searchTerm, error, loading, handleSubmit, updateTerm }) => (\n    <Container>\n        <Helmet>\n            <title>Search | Nomflix</title>\n        </Helmet>\n        <Form onSubmit={handleSubmit}>\n            <Input placeholder=\"Search Movies or TV Shows...\" value={searchTerm} onChange={updateTerm}/>\n        </Form>\n        {loading ? <Loader /> : <>\n            {movieResults && movieResults.length > 0 &&\n                <Section title=\"Movie Results\">\n                    {movieResults.map( movie =>\n                            <Poster\n                            key={movie.id} id={movie.id}\n                            title={movie.original_title}\n                            imageUrl={movie.poster_path}\n                            rating={movie.vote_average}\n                            year={movie.release_date.substr(0,4)}\n                            isMovie={true}\n                        ></Poster>\n                    )}\n                </Section>\n            }\n            {tvResults && tvResults.length > 0 &&\n                <Section title=\"TV Show Results\">\n                    {tvResults.map( tv =>\n                        <Poster\n                            key={tv.id} id={tv.id}\n                            title={tv.original_name}\n                            imageUrl={tv.poster_path}\n                            rating={tv.vote_average}\n                            year={ tv.first_air_date && tv.first_air_date.length >= 4 ? tv.first_air_date.substr(0,4) : '' }\n                            isMovie={false}\n                        ></Poster>\n                    )}\n                </Section>\n            }\n        </>}\n        {error && <Message text={error} color=\"#e74c3c\"></Message>}\n        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && \n            <Message text={`Nothing found for : ${searchTerm}`} color=\"#95a5a6\"></Message>\n        }\n    </Container>\n\n);\n\nSearchPresenter.propTypes = {\n    movieResults: PropTypes.array,\n    tvResults: PropTypes.array,\n    searchTerm: PropTypes.string,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired\n}\n\nexport default SearchPresenter;","import SearchContainer from './SearchContainer'\n\nexport default SearchContainer;","import React from 'react'\nimport SearchPresenter from './SearchPresenter'\nimport {movieApi, tvApi} from 'api'\n\nexport default class extends React.Component {\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: \"\",\n        error: null,\n        loading: false,\n    }\n\n    componentDidMount () {\n        // this.handleSubmit()\n    }\n\n    updateTerm = (event) => {\n        const {target: {value}} = event;\n        this.setState({\n            searchTerm: value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const {searchTerm} = this.state;\n        if( searchTerm !== \"\" )\n            this.searchByTerm();\n    }\n\n    searchByTerm = async () => {\n        const {searchTerm} = this.state;\n        try {\n            this.setState({ loading: true })\n            const {data:{results: movieResults}} = await movieApi.search( searchTerm );\n            const {data:{results: tvResults}} = await tvApi.search( searchTerm );\n            this.setState({\n                movieResults, tvResults\n            })\n        } catch {\n            this.setState({ error: \"Can't search that term\" })\n        } finally {\n            this.setState({ loading: false })\n        }\n    }\n\n    render () {\n        const { movieResults, tvResults, searchTerm, error, loading} = this.state;\n        return <SearchPresenter\n                movieResults={movieResults}\n                tvResults={tvResults}\n                searchTerm={searchTerm}\n                error={error}\n                loading={loading}\n                handleSubmit={this.handleSubmit}\n                updateTerm={this.updateTerm} />\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Loader from 'Components/Loader'\nimport Message from 'Components/Message'\nimport { Helmet } from 'react-helmet'\n\nconst Container = styled.div`\n    width: 100vw;\n    height: calc(100vh - 150px);\n    position: relative;\n    padding: 50px;\n`\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${props => props.bgImage ? `https://image.tmdb.org/t/p/original/${props.bgImage}` : ``});\n    background-size: cover;\n    background-position: center center;\n    filter: blur(3px);\n    opacity: 0.5;\n    z-index: -1;\n`\n\nconst Content = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    position: relative;\n`\n\nconst Cover = styled.div`\n    width: 30%;\n    height: 100%;\n    background-image: url(${props => props.bgImage ? `https://image.tmdb.org/t/p/original/${props.bgImage}` : ``});\n    background-size: cover;\n    background-position: center center;\n    border-radius: 5px;\n    position: relative;\n`\n\nconst Data = styled.div`\n    width: 70%;\n    margin-left: 10px;\n`\n\nconst Title = styled.span`\n    font-size: 32px;\n    margin-bottom: 10px;\n`\n\nconst ItemContainer = styled.div`\n    margin: 20px 0px;\n`\n\nconst Item = styled.span``\n\nconst Divider = styled.span`\n    margin: 0px 10px;\n`\n\nconst Overview = styled.p`\n    line-height: 1.5;\n    font-size: 15px;\n    opacity: 0.8;\n    width: 80%;\n`\n\n\nconst DetailPresenter = ({ results, loading, error }) => loading ? (<Loader/>) : (\n    <Container>\n        <Helmet>\n            <title>{results.title ? results.title : results.name} | Nomflix</title>\n        </Helmet>\n\n        <Backdrop bgImage={results.backdrop_path}/>\n        <Content>\n            <Cover bgImage={results.backdrop_path}/>\n            <Data>\n                <Title>{results.title ? results.title : results.name }</Title>\n                <ItemContainer>\n                    <Item>{results.release_date ? results.release_date.substring(0.4) : results.first_air_date.substring(0,4)}</Item>\n                    <Divider>·</Divider>\n                    <Item>{results.runtime ? results.runtime : results.episode_run_time[0] } mins</Item>\n                    <Divider>·</Divider>\n                    <Item>{results.genres ? results.genres.map( (g,i) => i !== results.genres.length - 1 ? `${g.name} / ` : g.name) : \"\" }</Item>\n                </ItemContainer>\n                <Overview>{results.overview}</Overview>\n            </Data>\n        </Content>\n    </Container>\n)\n\nDetailPresenter.propTypes = {\n    movieResults: PropTypes.array, \n    tvResults: PropTypes.array, \n    searchTerm: PropTypes.string, \n    error: PropTypes.string, \n    loading: PropTypes.bool.isRequired, \n}\n\nexport default DetailPresenter;","import DetailContainer from './DetailContainer'\n\nexport default DetailContainer;","import React from 'react'\nimport DetailPresenter from './DetailPresenter'\nimport {movieApi, tvApi} from 'api'\n\nexport default class extends React.Component {\n\n    constructor(props){\n        super(props)\n        const { location: { pathname } } = props;\n        this.state = {\n            results: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes( \"/movie/\" ),\n        }\n    }\n\n    async componentDidMount(){\n        const {\n            match: { params: { id } },\n            history: { push },\n        } = this.props;\n        const { isMovie } = this.state\n        const parsedId = parseInt(id)\n        if( isNaN(parsedId) )\n            return push(\"/\");\n\n        let results = null;\n        try {\n            this.setState({ loading: true })\n            if( isMovie ){\n                const request = await movieApi.movieDetail( id );\n                results = request.data;\n            } else {\n                const request = await tvApi.showDetail( id );\n                results = request.data;\n            }\n            this.setState({results})\n        } catch(e) {\n            this.setState({\n                error: \"Can't find details\"\n            })\n        } finally {\n            this.setState({ loading: false })\n        }\n    }\n\n    render () {\n        const { results, error, loading } = this.state;\n        return <DetailPresenter\n                results={results}\n                error={error}\n                loading={loading} />\n    }\n}","import React from \"react\";\nimport { withRouter, Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nconst List = styled.ul`\n    display: flex;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background-color: rgba( 20, 20, 20, 0.7 );\n    padding: 0px 10px;\n    z-index: 1; /* always on the top, sometimes, transition elements cover it up */\n`\nconst Item = styled.li`\n`\nconst TabLink = styled(Link)`\n    font-size: 20px;\n    font-weight: 600;\n    border-bottom: 3px solid ${props => props.activated ? 'red' : 'transparent'};\n    padding: 15px 10px;\n    margin-right: 5px;\n    display: flex;\n    align-self: center;\n    transition: 0.5s;\n`\n\nconst Header = props => {\n    const { location : { pathname } } = props\n    return (\n    <List>\n        <Item>\n            <TabLink activated={pathname === \"/\" ? 1 : 0} to=\"/\">Home</TabLink>\n        </Item>\n        <Item>\n            <TabLink activated={pathname === \"/tv\" ? 1 : 0} to=\"/tv\">TV</TabLink>\n        </Item>\n        <Item>\n            <TabLink activated={pathname === \"/search\" ? 1 : 0} to=\"/search\">Search</TabLink>\n        </Item>\n    </List>\n)}\n\nexport default withRouter( Header )","import React from \"react\";\nimport {HashRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\nimport Home from \"Routes/Home\";\nimport TV from \"Routes/TV\";\nimport Search from \"Routes/Search\";\nimport Details from \"Routes/Details\";\nimport Header from \"Components/Header\";\n\nexport default () => (\n    <Router>\n        <Header />\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/tv\" exact component={TV} />\n            {/* <Route path=\"/tv/popular\" render={()=><h1>Popular</h1>} /> */}\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/movie/:id\" component={Details} />\n            <Route path=\"/show/:id\" component={Details} />\n            <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n    </Router>\n)","import {createGlobalStyle} from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n    ${reset}\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n    body {\n        background-color: rgba(20,20,20,1);\n        color: white;\n        padding-top: 50px;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n`","import React from 'react';\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"GlobalStyles\"\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <GlobalStyles />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}